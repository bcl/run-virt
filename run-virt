#!/usr/bin/python3
#
# Copyright (C) 2015-2016
# Red Hat, Inc.  All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:      Brian C. Lane <bcl@redhat.com>
#
import os
import sys
import subprocess
import argparse
import logging
import shutil
import tempfile
import random
from pylorax.imgutils import mkcpio
from pylorax.mount import IsoMountpoint

MAPPER="/dev/mapper/"
LVM_POOL_NAME="virt_pool"
IFUP_SCRIPT="/etc/qemu-ifup"

#OVMF_DIR="/usr/share/edk2.git/ovmf-x64/"
OVMF_DIR="/usr/share/OVMF/"
UEFI_FIRMWARE="loader=%(OMVF)s/OVMF_CODE.fd,loader_ro=yes,loader_type=pflash,nvram_template=%(OMVF)s/OVMF_VARS.fd" % {"OMVF": OVMF_DIR}


def lvname(name):
    """ Escape '-' in the LV name."""
    return name.replace('-', '--')


def lvpath(name):
    """ Return the full path to the LV with escaped name."""
    return(MAPPER+LVM_POOL_NAME+"-"+lvname(name))


def append_initrd(initrd, files):
    """ Append files to an initrd.

    :param str initrd: Path to initrd
    :param list files: list of file paths to add
    :returns: Path to a new initrd
    :rtype: str

    The files are added to the initrd by creating a cpio image
    of the files (stored at /) and writing the cpio to the end of a
    copy of the initrd.

    The initrd is not changed, a copy is made before appending the
    cpio archive.
    """
    qemu_initrd = tempfile.mktemp(prefix="lmc-initrd-", suffix=".img")
    shutil.copy2(initrd, qemu_initrd)
    ks_dir = tempfile.mkdtemp(prefix="lmc-ksdir-")
    for ks in files:
        shutil.copy2(ks, ks_dir)
    ks_initrd = tempfile.mktemp(prefix="lmc-ks-", suffix=".img")
    mkcpio(ks_dir, ks_initrd)
    shutil.rmtree(ks_dir)
    with open(qemu_initrd, "ab") as initrd_fp:
        with open(ks_initrd, "rb") as ks_fp:
            while True:
                data = ks_fp.read(1024**2)
                if not data:
                    break
                initrd_fp.write(data)
    os.unlink(ks_initrd)

    return qemu_initrd


def main(args):
    # Shut down any previous virt
    # search process list for named qemu processes

    disks = []
    for n in range(0,args.disks):
        if n:
            disk_name = args.name + "-%d" % n
        else:
            disk_name = args.name

        if args.blank:
            cmd = ["lvremove", "--force", lvpath(disk_name)]
            logging.debug(cmd)
            try:
                subprocess.check_call(cmd)
            except  subprocess.CalledProcessError:
                pass

            cmd = ["lvcreate", "--size", args.size+"G", LVM_POOL_NAME, "-n", disk_name]
            logging.debug(cmd)
            try:
                subprocess.check_call(cmd)
            except  subprocess.CalledProcessError:
                pass
        else:
            if not os.path.exists(lvpath(disk_name)):
                logging.error("%s doesn't exist, rerun with --blank", lvpath(disk_name))
                continue

        disks += ["-drive", "file=%s,if=%s,cache=%s,format=raw" % (lvpath(disk_name), args.bus, args.disk_cache)]

    # Assemble a qemu commandline
    cmd = ["qemu-kvm", "-name", args.name, "-m", args.ram, "-smp", args.cpu]
    cmd += disks
    if args.uefi:
        cmd += ["-drive", "file=%s/OVMF_CODE.fd,if=pflash,format=raw,unit=0,readonly=on" % OVMF_DIR]
        cmd += ["-drive", "file=%s/OVMF_VARS.fd,if=pflash,format=raw,unit=1" % OVMF_DIR]

    if args.pxe:
        cmd += ["-boot", "n"]

        # PXE needs bridged network to access PXE server on LAN
        # Needs qemu-ifup script:
        # http://www.linux-kvm.org/page/Networking#Public_Bridge
        # Assumes host already had br0 setup
        macaddr = "DE:AD:BE:EF:%02X:%02X" % (random.randint(0, 255), random.randint(0, 255))
        cmd += ["-net", "nic,model=%s,macaddr=%s" % (args.nic_model, macaddr)]
        cmd += ["-net", "tap,script=%s" % IFUP_SCRIPT]
    elif args.iso:
        cmd += ["-drive", "file=%s,media=cdrom,readonly=on" % args.iso]

        # Inject the kickstart into the initrd
        if args.kickstart:
            iso = IsoMountpoint(args.iso)
            initrd = append_initrd(iso.initrd, [args.kickstart])
            cmd += ["-kernel", iso.kernel]
            cmd += ["-initrd", initrd]
            cmd += ["-append", "inst.ks=file:/%s inst.stage2=cdrom:/dev/sr0 %s" % (os.path.basename(args.kickstart), args.extra)]
        else:
            cmd += ["-boot", "d"]
    else:
        logging.error("No boot method specified.")
        sys.exit(1)

    # Add extra cdroms
    if args.cdrom:
        for cdrom in args.cdrom:
            cmd += ["-drive", "file=%s,media=cdrom,readonly=on" % cdrom]

    cmd += ["-nodefconfig"]
    cmd += ["-object", "rng-random,id=virtio-rng0,filename=/dev/random"]
    cmd += ["-device", "virtio-rng-pci,rng=virtio-rng0,id=rng0,bus=pci.0,addr=0x9"]

    # Just use default gtk display for now
    cmd += ["-nographic", "-display", "gtk" ]

    # Add more nics
# TODO
#    for i in range(0, args.nics):
#        cmd += ["--network", "network=default,model=%s" % args.nic_model]

    logging.debug(cmd)
    try:
        subprocess.check_call(cmd)
    except subprocess.CalledProcessError as e:
        logging.error("%s: %s" % (e, e.output))


def setup_args():
    """ Return argparse.Parser object of cmdline."""
    parser = argparse.ArgumentParser(description="Run a virt")

    parser.add_argument("-b", "--blank", action="store_true", default=False, help="Start with blank disks")
    parser.add_argument("--bus", default="virtio", help="bus type to use for disks. eg. virtio or scsi")
    parser.add_argument("-n", "--disks", default=2, type=int, help="Number of disks to start with")
    parser.add_argument("--disk-cache", default="writeback", choices=['none', 'writethrough', 'directsync', 'unsafe', 'writeback'], help="Disk cache type")
    parser.add_argument("-s", "--size", default="10", help="Default size of disks in GiB")
    parser.add_argument("-p", "--pxe", action="store_true", default=False, help="pxe boot")
    parser.add_argument("-i", "--iso", help="iso to boot")
    parser.add_argument("--cdrom", action="append", help="Additional cdrom iso image(s) to attach")
    parser.add_argument("-k", "--kickstart", help="kickstart to inject into initrd, requires an iso")
    parser.add_argument("-e", "--extra", help="Add extra cmdline args for --kickstart boot", default="")
    parser.add_argument("-r", "--ram", default="2048", help="Amount of RAM in Megabytes")
    parser.add_argument("-c", "--cpu", default="2", help="Number of CPUs")
    parser.add_argument("-u", "--uefi", action="store_true", default=False, help="Boot with UEFI OVMF firmware")
    parser.add_argument("--ovmf-dir", help="Directory with OVMF firmware")
    parser.add_argument("--nics", type=int, default=0, help="Number of extra nics to add")
    parser.add_argument("--nic-model", default="virtio", choices=["virtio", "e1000", "rtl8139"], help="NIC model")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose debugging output")
    parser.add_argument("name", help="Name of virt")
    args = parser.parse_args()

    # Sanity check the args
    if args.iso and args.pxe:
        args.error("Cannot use --iso and --pxe at the same time.")
    elif not args.iso and not args.pxe:
        args.error("Need to pass one of --iso or --pxe")
    elif args.kickstart and not args.iso:
        args.error("--kickstart needs an --iso so it can inject into the initrd")

    # Override cache default for virtio bus
    if args.bus == "virtio":
        if args.disk_cache not in ["none", "directsync"]:
            args.disk_cache = "none"

    return args


def setup_logging():
    if args.verbose:
        level=logging.DEBUG
    else:
        level=logging.INFO
    logging.basicConfig(format='%(levelname)s:%(message)s', level=level)

if __name__=='__main__':
    args = setup_args()
    setup_logging()
    main(args)
